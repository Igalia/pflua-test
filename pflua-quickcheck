#!/usr/bin/env luajit
-- -*- lua -*-
package.path = package.path .. ";deps/pflua/src/?.lua"

local ffi = require("ffi")
local pf = require("pf")
local savefile = require("pf.savefile")
local libpcap = require("pf.libpcap")
local parse = require("pf.parse")
local expand = require("pf.expand")
local optimize = require("pf.optimize")
local utils = require('pf.utils')
local codegen = require('pf.codegen')
local now, pp = utils.now, utils.pp

local function filter_time(pred, ptr, ptr_end, expected)
   local total_count = 0
   local match_count = 0
   local start = now()
   while ptr < ptr_end do
      local record = ffi.cast("struct pcap_record *", ptr)
      local packet = ffi.cast("unsigned char *", record + 1)
      if pred(packet, record.incl_len) then
         match_count = match_count + 1
      end
      total_count = total_count + 1
      ptr = packet + record.incl_len
   end
   local lapse = now() - start
   if match_count ~= expected then
      error("expected "..expected.." matching packets, but got "..match_count)
   end
   return total_count / lapse / 1e6
end

function run_filters(tests, ptr, ptr_end)
   local results = {}
   for i, test in ipairs(tests) do
      results[i] = filter_time(test.pred, ptr, ptr_end, test.count)
   end
   return results
end

function run_tests(tests, capture_start, capture_end, iterations)
   run_filters(tests, capture_start, capture_end) -- Warmup
   for i=1,iterations do
      local scores = run_filters(tests, capture_start, capture_end)
      print(table.concat(scores, '\t'))
      io.flush()
   end
end

local function load_packets(file)
   local header, ptr, ptr_end = savefile.open_and_mmap(file)
   local ret = {}
   while ptr < ptr_end do
      local record = ffi.cast("struct pcap_record *", ptr)
      local packet = ffi.cast("unsigned char *", record + 1)
      table.insert(ret, { packet=packet, len=record.incl_len })
      ptr = packet + record.incl_len
   end
   return ret
end

local function load_filters(file)
   local ret = {}
   for line in io.lines(file) do table.insert(ret, line) end
   return ret
end

local function choose_packet(packets)
   local idx = math.random(#packets)
   local ret = packets[idx]
   return ret.packet, ret.len, idx
end

local function choose_filter(filters)
   return filters[math.random(#filters)]
end

local function perturb_expr(expr) return expr end

function main(...)
   local capture, filter_list, iterations, seed = ...
   assert(filter_list,
          "usage: pflua-quickcheck PATH/TO/CAPTURE.PCAP FILTER-LIST [ITERATIONS [SEED]]")
   packets = load_packets(capture)
   filters = load_filters(filter_list)
   iterations = tonumber(iterations) or 100
   if seed then
      math.randomseed(tonumber(seed))
   else
      seed = os.time()
      print("Using os.time() as seed: "..seed)
      math.randomseed(tonumber(seed))
   end
   for i = 1,iterations do
      local P, len, idx = choose_packet(packets)
      local F = choose_filter(filters)
      local expanded = expand.expand(parse.parse(F), "EN10MB")
      local perturbed = perturb_expr(expanded)
      local optimized = optimize.optimize(expanded)

      local unoptimized_pred = codegen.compile(expanded, F)
      local optimized_pred = codegen.compile(optimized, F)

      if unoptimized_pred(P, len) ~= optimized_pred(P, len) then
         pp(expanded)
         pp(perturbed)
         pp(optimized)
         print(unoptimized_pred)
         print(optimized_pred)
         print(idx)
         error('failed.')
      end
   end
   print(iterations.." iterations succeeded.")
end

main(...)
