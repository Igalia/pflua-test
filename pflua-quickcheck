#!/usr/bin/env luajit
-- -*- lua -*-
package.path = package.path .. ";deps/pflua/src/?.lua"

local ffi = require("ffi")
local pf = require("pf")
local savefile = require("pf.savefile")
local libpcap = require("pf.libpcap")
local parse = require("pf.parse")
local expand = require("pf.expand")
local optimize = require("pf.optimize")
local utils = require('pf.utils')
local codegen = require('pf.codegen')
local gmtime, pp = utils.gmtime, utils.pp

local function load_packets(file)
   local header, ptr, ptr_end = savefile.open_and_mmap(file)
   local ret = {}
   while ptr < ptr_end do
      local record = ffi.cast("struct pcap_record *", ptr)
      local packet = ffi.cast("unsigned char *", record + 1)
      table.insert(ret, { packet=packet, len=record.incl_len })
      ptr = packet + record.incl_len
   end
   return ret
end

local function choose(choices)
   local idx = math.random(#choices)
   return choices[idx], idx
end

local function load_filters(file)
   local ret = {}
   for line in io.lines(file) do table.insert(ret, line) end
   return ret
end

local function perturb_expr(expr) return expr end

local True, False, Fail, ComparisonOp, BinaryOp, UnaryOp, Number, Len
local Unary, Binary, Arithmetic, Comparison, Conditional, Logical

function True() return { 'true' } end
function False() return { 'false' } end
function Fail() return { 'fail' } end
function ComparisonOp() return choose({ '<', '>' }) end
function BinaryOp() return choose({ '+', '-', '/' }) end
function UnaryOp() return choose({ 'uint32', 'int32', 'ntohs', 'ntohl' }) end
function Number()
   if math.random() < 0.2 then return math.random(-2^31, 2^32 - 1)
   else return choose({ 0, 1, -2^31, 2^32-1, 2^31-1 })
   end
end
function Len() return 'len' end
function Unary(db) return { UnaryOp(), Arithmetic(db) } end
function Binary(db)
   local op, lhs, rhs = BinaryOp(), Arithmetic(db), Arithmetic(db)
   if op == '/' then table.insert(db, { '!=', rhs, 0 }) end
   return { op, lhs, rhs }
end
function PacketAccess(db)
   local pkt_access_size = choose({1, 2, 4})
   local position = {'uint32', Arithmetic(db) }
   table.insert(db, {'>=', 'len', {'+', position, pkt_access_size}})
   return { '[]', position, pkt_access_size }
end
function Arithmetic(db) return choose({ Unary, Binary, Number, Len, PacketAccess })(db) end
function Comparison()
   local assertions = {}
   local expr = { ComparisonOp(), Arithmetic(assertions), Arithmetic(assertions) }
   while #assertions > 0 do
      expr = { 'if', table.remove(assertions), expr, { 'fail' } }
   end
   return expr
end
function Conditional() return { 'if', Logical(), Logical(), Logical() } end
function Logical()
   return choose({ Conditional, Comparison, True, False, Fail })()
end

function print_repo_versions()
   print(string.format("pflua-quickcheck revision: %s",
                       io.popen("git rev-parse HEAD"):read("*all")))
   print(string.format("pflua revision: %s",
                       io.popen("cd deps/pflua && git rev-parse HEAD"):read("*all")))
end

function main(...)
   local args = { ... }
   local seed, iterations

   while #args >= 1 and args[1]:match("^%-%-") do
      local arg, _, val = table.remove(args, 1):match("^%-%-([^=]*)(=(.*))$")
      assert(arg)
      if arg == 'seed' then seed = assert(tonumber(val))
      elseif arg == 'iterations' then iterations = assert(tonumber(val))
      else error("Unknown argument: "..arg) end
   end
   if #args < 1 or #args > 3 then
      print("usage: pflua-quickcheck [--seed=SEED] [--iterations=ITERATIONS] PATH/TO/CAPTURE.PCAP [FILTER-LIST]")
      os.exit(1)
   end
   local capture, filter_list = args[1], args[2]
   local packets = load_packets(capture)
   local filters
   if filter_list then
      filters = load_filters(filter_list)
   end
   if seed then
      math.randomseed(seed)
   else
      seed = math.floor(gmtime() * 1e6) % 10^9
      print("Using time as seed: "..seed)
      math.randomseed(tonumber(seed))
   end
   if not iterations then iterations = 1000 end

   for i = 1,iterations do
      local packet, packet_idx = choose(packets)
      local P, len = packet.packet, packet.len
      local F, expanded
      if filters then
         F = choose(filters)
         expanded = expand.expand(parse.parse(F), "EN10MB")
      else
         F = "generated expression"
         expanded = Logical()
      end
      local perturbed = perturb_expr(expanded)
      local opt_status, optimized =
         xpcall(function () return optimize.optimize(expanded) end,
                debug.traceback)
      if not opt_status then
         print(string.format("Found an optimizer bug on run %s, with code:", i))
         pp(expanded)
         print(optimized) -- This is an error code and traceback in this case
         print_repo_versions()
         print(string.format("Run again as: pflua-quickcheck --seed=%s --iterations=%s %s %s",
                             seed, i + 1, capture, filter_list or ""))
         os.exit(1)
      end

      local unoptimized_pred = codegen.compile(expanded, F)
      local optimized_pred = codegen.compile(optimized, F)

      if unoptimized_pred(P, len) ~= optimized_pred(P, len) then
         print("--- Expanded:")
         pp(expanded)
         print("--- Perturbed:")
         pp(perturbed)
         print("--- Optimized:")
         pp(optimized)
         print(unoptimized_pred)
         print(optimized_pred)
         print(packet_idx)
         print_repo_versions()
         print("Optimized and unoptimized filter return values do not match.")
         print(string.format("Run again as: pflua-quickcheck --seed=%s --iterations=%s %s %s",
                             seed, i + 1, capture, filter_list or ""))
         os.exit(1)
      end
   end
   print(iterations.." iterations succeeded.")
end

main(...)
