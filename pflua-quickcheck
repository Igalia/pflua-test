#!/usr/bin/env luajit
-- -*- lua -*-
package.path = package.path .. ";deps/pflua/src/?.lua"

local ffi = require("ffi")
local pf = require("pf")
local savefile = require("pf.savefile")
local libpcap = require("pf.libpcap")
local parse = require("pf.parse")
local expand = require("pf.expand")
local optimize = require("pf.optimize")
local utils = require('pf.utils')
local codegen = require('pf.codegen')
local gmtime, pp = utils.gmtime, utils.pp

local function load_packets(file)
   local header, ptr, ptr_end = savefile.open_and_mmap(file)
   local ret = {}
   while ptr < ptr_end do
      local record = ffi.cast("struct pcap_record *", ptr)
      local packet = ffi.cast("unsigned char *", record + 1)
      table.insert(ret, { packet=packet, len=record.incl_len })
      ptr = packet + record.incl_len
   end
   return ret
end

local function load_filters(file)
   local ret = {}
   for line in io.lines(file) do table.insert(ret, line) end
   return ret
end

local function choose_packet(packets)
   local idx = math.random(#packets)
   local ret = packets[idx]
   return ret.packet, ret.len, idx
end

local function choose_filter(filters)
   return filters[math.random(#filters)]
end

local function perturb_expr(expr) return expr end

local function terminal(expr)
   local term = {}
   function term.produce(grammar) return expr end
   return term
end
local function choice(choices)
   local term = {}
   function term.produce(grammar) 
      local which = math.random(#choices)
      return grammar[choices[which]].produce(grammar)
   end
   return term
end
local function terminalchoice(terminals)
   local term = {}
   function term.produce(grammar)
      local choices = {}
      local which = math.random(#terminals)
      return terminals[which]
   end
   return term
end
local function range(min, max)
   local term = {}
   function term.produce(grammar)
      return min + math.random(max + 1 - min)
   end
   return term
end
local function nonterminal(expr)
   local term = {}
   function term.produce(grammar)
      local ret = {}
      for i = 1,#expr do
         ret[i] = grammar[expr[i]].produce(grammar)
      end
      return ret
   end
   return term
end

local grammar = {
   True = terminal({ 'true' }),
   False = terminal({ 'false' }),
   Fail = terminal({ 'fail' }),
   ComparisonOp = terminalchoice({ '<', '>' }),
   BinaryOp = terminalchoice({ '+', '-' }),
   UnaryOp = terminalchoice({ 'uint32', 'int32', 'ntohs', 'ntohl' }),
   Number = range(-2^31, 2^32 - 1),
   Len = terminal('len'),
   IfOp = terminal('if'),
   Unary = nonterminal({ "UnaryOp", "Arithmetic" }),
   Binary = nonterminal({ "BinaryOp", "Arithmetic", "Arithmetic" }),
   Arithmetic = choice({ "Binary", "Unary", "Number", "Len" }),
   Comparison = nonterminal({ "ComparisonOp", "Arithmetic", "Arithmetic" }),
   Conditional = nonterminal({ "IfOp", "LogicalExpr", "LogicalExpr", "LogicalExpr" }),
   LogicalExpr = choice({ "Conditional", "Comparison", "True", "False", "Fail" })
}

function main(...)
   local args = { ... }
   local seed
   if #args >= 1 and args[1]:match("^--seed=") then
      seed = assert(tonumber(table.remove(args,1):sub(8)))
   end
   if #args < 1 or #args > 3 then
      print("usage: pflua-quickcheck [--seed=SEED] PATH/TO/CAPTURE.PCAP [FILTER-LIST] [ITERATIONS]")
      os.exit(1)
   end
   local capture, filter_list, iterations = args[1], args[2], args[3]
   local packets = load_packets(capture)
   local filters
   if filter_list then
      filters = load_filters(filter_list)
   end
   iterations = tonumber(iterations) or 100
   if seed then
      math.randomseed(seed)
   else
      seed = (gmtime() * 1e6 % 1000000)
      print("Using time as seed: "..seed)
      math.randomseed(tonumber(seed))
   end

   for i = 1,iterations do
      local P, len, idx = choose_packet(packets)
      local F, expanded
      if filters then
         F = choose_filter(filters)
         expanded = expand.expand(parse.parse(F), "EN10MB")
      else
         F = "grammar-generated logical expression"
         expanded = grammar.LogicalExpr.produce(grammar)
      end
      local perturbed = perturb_expr(expanded)
      local optimized = optimize.optimize(expanded)


      pp(expanded)
      pp(perturbed)
      pp(optimized)
      local unoptimized_pred = codegen.compile(expanded, F)
      local optimized_pred = codegen.compile(optimized, F)

      if unoptimized_pred(P, len) ~= optimized_pred(P, len) then
         print(unoptimized_pred)
         print(optimized_pred)
         print(idx)
         error('failed.')
      end
   end
   print(iterations.." iterations succeeded.")
end

main(...)
